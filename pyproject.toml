[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "flowslice"
version = "0.1.0"
description = "Dataflow slicing for Python - trace variable flow through your code"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "flowslice contributors"}
]
keywords = ["dataflow", "slicing", "static-analysis", "program-analysis", "ast"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]

dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "mypy>=1.0",
    "ruff>=0.1.0",
]

[project.scripts]
flowslice = "flowslice.cli.main:main"

[project.urls]
Homepage = "https://flowslice.dev"
Documentation = "https://flowslice.dev"
Repository = "https://github.com/flowslice/flowslice"
Issues = "https://github.com/flowslice/flowslice/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/flowslice"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=flowslice --cov-report=term-missing --cov-report=html"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
strict = true

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]
ignore = []

[tool.coverage.run]
source = ["src/flowslice"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
